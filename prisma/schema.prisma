// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Pokemon {
  pokemonId            String        @id @unique @db.VarChar(32)
  pokemonPokedex       Int           @unique @db.Int()
  pokemonName          String        @default("Unknown") @db.VarChar(32)
  pokemonPicture       String        @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTDK5_M9hXf_9mGi98hp7qu3rO4f6LmalxCwjM-ZhS15w&s") @db.VarChar(120)
  pokemonShinyPicture  String?       @db.VarChar(120)
  pokemonAlolanPicture String?       @db.VarChar(120)
  pokemonRarity        PokemonRarity @default(COMMON)

  pokemonType   PokemonType[]
  pokemonEvolve PokemonEvolve?
  pokemonEVs    PokemonEVs?
}

model Pokemons {
  pokemonId          String  @id @unique @db.VarChar(32)
  pokemonName        String  @db.VarChar(32)
  pokemonPicture     String  @db.VarChar(120)
  pokemonOwner       String? @db.VarChar(32)
  pokemonPlacementId Int?    @db.Int()

  pokemonXP       Int           @db.Int()
  pokemonLevel    Int           @db.Int()
  pokemonCatch    Boolean       @default(true)
  pokemonSelected Boolean       @default(false)
  pokemonFavorite Boolean       @default(false)
  pokemonAuction  Boolean       @default(false)
  pokemonGender   PokemonGender @default(MALE)
  pokemonNature   PokemonNature @default(ADAMANT)
  pokemonRarity   PokemonRarity @default(COMMON)

  spawnedServer  String? @db.VarChar(32)
  spawnedChannel String? @db.VarChar(32)
  spawnedMessage String? @unique @db.VarChar(32)

  PokemonBattle   PokemonBattle?
  PokemonIVs      PokemonsIVs?
  PokemonsEVs     PokemonsEVs?
  PokemonsAuction PokemonsAuction?
}

model PokemonType {
  typeUniqueId String @id @unique @db.VarChar(32)

  pokemon     Pokemon  @relation(fields: [pokemonId], references: [pokemonId], onDelete: Cascade)
  pokemonId   String   @db.VarChar(32)
  pokemonType PokeType @default(NORMAL)
}

model PokemonEvolve {
  evolveUniqueId String @id @unique @db.VarChar(32)

  pokemon            Pokemon @relation(fields: [pokemonId], references: [pokemonId], onDelete: Cascade)
  pokemonId          String  @unique @db.VarChar(32)
  nextEvolveName     String  @db.VarChar(32)
  nextEvolveLevel    Int     @db.Int()
  currentEvolveStage Int     @db.Int()
}

model PokemonsEVs {
  pokemonId String   @id @unique @db.VarChar(32)
  pokemon   Pokemons @relation(fields: [pokemonId], references: [pokemonId], onDelete: Cascade)

  HP         Int @db.Int()
  Attack     Int @db.Int()
  Defense    Int @db.Int()
  SpecialAtk Int @db.Int()
  SpecialDef Int @db.Int()
  Speed      Int @db.Int()
}

model PokemonEVs {
  pokemonId String  @id @unique @db.VarChar(32)
  pokemon   Pokemon @relation(fields: [pokemonId], references: [pokemonId], onDelete: Cascade)

  HP         Int @db.Int()
  Attack     Int @db.Int()
  Defense    Int @db.Int()
  SpecialAtk Int @db.Int()
  SpecialDef Int @db.Int()
  Speed      Int @db.Int()
}

model PokemonsIVs {
  pokemonId String   @id @unique @db.VarChar(32)
  pokemon   Pokemons @relation(fields: [pokemonId], references: [pokemonId], onDelete: Cascade)

  HP         Int @db.Int()
  Attack     Int @db.Int()
  Defense    Int @db.Int()
  SpecialAtk Int @db.Int()
  SpecialDef Int @db.Int()
  Speed      Int @db.Int()

  pokemonTotalIVs Float @db.Float()
}

model PokemonBattle {
  pokemonId String   @id @unique @db.VarChar(32)
  pokemon   Pokemons @relation(fields: [pokemonId], references: [pokemonId], onDelete: Cascade)

  opponentTrainer String @db.VarChar(32)
  opponentHP      Int    @db.Int()

  mainTrainer String @db.VarChar(32)
  mainHP      Int    @db.Int()
}

model userData {
  userId          String       @id @unique @db.VarChar(32)
  userBlacklisted Boolean      @default(false)
  userTokens      Int          @default(0) @db.Int()
  userCoins       Int          @default(500) @db.Int()
  trainerNumber   Int          @unique @default(autoincrement()) @db.Int()
  trainerBattles  Int          @db.Int()
  trainerRank     TrainerRanks @default(NORMAL_TRAINER)
  pokemonOrder    PokemonOrder @default(ID)

  userCodes       userCodes?
  userBag         userBag?
  voteStreak      VoteStreak?
  userCatchBuddy  userCatchBuddy?
  userPayment     userPayment[]
  userAuctionBids PokemonsAuction[]
  userChallenges  userChallenges[]
  userTickets     userTickets[]
}

model userBag {
  userId String   @id @unique @db.VarChar(32)
  user   userData @relation(fields: [userId], references: [userId], onDelete: Cascade)

  userRedeems     Int @db.Int()
  spawnIncense    Int @db.Int()
  catchBuddyCandy Int @db.Int()
}

model userPayment {
  invoiceId String @id @unique @db.VarChar(120)

  invoiceOwner String   @db.VarChar(32)
  user         userData @relation(fields: [invoiceOwner], references: [userId], onDelete: Cascade)

  invoiceType String @db.VarChar(32)
}

model userCodes {
  userId String   @id @unique @db.VarChar(32)
  user   userData @relation(fields: [userId], references: [userId], onDelete: Cascade)

  code String @unique @db.VarChar(60)
}

model globalCodes {
  code           String @id @unique @db.VarChar(60)
  codeLimitation Int    @db.Int()

  codeRedeemed Int        @db.Int()
  rewardType   RewardType @default(COINS)
  rewardAmount Int        @db.Int()
}

model PokemonServer {
  serverId          String  @id @unique @db.VarChar(32)
  serverBlacklisted Boolean @default(false)
  serverAnnouncer   Boolean @default(true)
  serverRedirect    String? @db.VarChar(32)
  serverSpawn       Int     @db.Int()
  serverLanguage    String  @db.VarChar(6)
}

model channelIncense {
  serverId  String @db.VarChar(32)
  channelId String @id @unique @db.VarChar(32)

  incenseEnabled Boolean
  incenseTimeout BigInt  @db.BigInt()
}

model PokemonsAuction {
  pokemonId String   @id @unique @db.VarChar(32)
  pokemon   Pokemons @relation(fields: [pokemonId], references: [pokemonId], onDelete: Cascade)

  auctionId      Int    @unique @db.Int()
  auctionStart   Int    @db.Int()
  auctionCurrent Int    @db.Int()
  endTime        BigInt @db.BigInt()
  bidAmounts     Int    @db.Int()

  leaderBidTime BigInt    @db.BigInt()
  leaderData    String?   @db.VarChar(32)
  leader        userData? @relation(fields: [leaderData], references: [userId], onDelete: Cascade)
}

model userCatchBuddy {
  userId String   @id @unique @db.VarChar(32)
  user   userData @relation(fields: [userId], references: [userId], onDelete: Cascade)

  catcherEnabled Boolean @default(false)
  catcherRefill  BigInt  @db.BigInt()
  catcherLeft    BigInt  @db.BigInt()
  catcherNext    BigInt  @db.BigInt()
  catchAvailable Boolean @default(false)
  catcherCaught  BigInt  @default(0) @db.BigInt()

  pokemonDuration    Int @db.Int()
  pokemonUpgrade     Int @db.Int()
  pokemonLuckUpgrade Int @db.Int()
}

model VoteStreak {
  userId String   @id @unique @db.VarChar(32)
  user   userData @relation(fields: [userId], references: [userId], onDelete: Cascade)

  latestVote       BigInt @default(0) @db.BigInt()
  latestVoteExpire BigInt @default(0) @db.BigInt()

  voteStreak Int @default(0) @db.Int()
}

model userChallenges {
  challengesId Int @id @unique @default(autoincrement()) @db.Int()

  challengesOwner String   @db.VarChar(32)
  user            userData @relation(fields: [challengesOwner], references: [userId], onDelete: Cascade)

  challengesName        String @db.VarChar(64)
  challengesDescription String @db.VarChar(256)
  challengesAmount      Int    @db.Int()
  challengesToCatch     String @db.VarChar(32)

  challengesCaughtAmount Int     @default(0) @db.Int()
  challengesCompleted    Boolean @default(false)

  challengesCoinReward         Int?     @db.Int()
  challengesTokenReward        Int?     @db.Int()
  challengesPokemonReward      String?  @db.VarChar(32)
  challengesPokemonRewardShiny Boolean? @default(false)
}

model lotteryGlobal {
  lotteryId Int @id @default(0) @db.Int()

  currentJackpot      BigInt @db.BigInt()
  currentParticipants Int    @db.Int()
  currentlyEnding     BigInt @db.BigInt()

  totalBought BigInt @db.BigInt()
}

model userTickets {
  ticketId Int @id @unique @default(autoincrement()) @db.Int()

  ticketsOwner String   @db.VarChar(32)
  user         userData @relation(fields: [ticketsOwner], references: [userId], onDelete: Cascade)
}

enum PokemonRarity {
  COMMON
  UNCOMMON
  RARE
  LEGEND
  MYTHICAL
  ULTRABEAST
  SHINY
  DEVELOPER
}

enum TrainerRanks {
  NORMAL_TRAINER
  BRONZE_TRAINER
  SILVER_TRAINER
  GOLD_TRAINER
  PLATINUM_TRAINER
  MODERATOR
  ADMINISTRATOR
  DEVELOPER
}

enum PokemonNature {
  ADAMANT
  BASHFUL
  BRAVE
  BOLD
  CALM
  CAREFUL
  DOCILE
  GENTLE
  HARDY
  HASTY
  IMPISH
  JOLLY
  LAX
  LONELY
  MILD
  MODEST
  NAIVE
  NAUGHTY
  QUIET
  QUIRKY
  RASH
  RELAXED
  SASSY
  SERIOUS
  TIMID
}

enum RewardType {
  POKEMON
  COINS
  TOKENS
}

enum PokemonGender {
  MALE
  FEMALE
}

enum PokemonOrder {
  ID
  IV
  LEVEL
  FAVORITE
}

enum PokeType {
  NORMAL
  FIRE
  WATER
  GRASS
  FLYING
  FIGHTING
  POISON
  ELECTRIC
  GROUND
  ROCK
  PSYCHIC
  ICE
  BUG
  GHOST
  STEEL
  DRAGON
  DARK
  FAIRY
}
